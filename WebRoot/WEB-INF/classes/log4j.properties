#配置根Logger，其语法为： log4j.rootLogger = [ level ] , appenderName, appenderName, … 
#其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。 
#appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。 appenderName是自定义的，但是为了明了，都会使用console，file等特殊名字表示输出到哪里去。

#我这里定义的是默认全局都是只有ERROR级别的日志信息才会输出,并且输出的目的地是文件和控制台
log4j.rootLogger=DEBUG,glitterFile,console 
#定义凡是com.glitter包及其子包下面的类输出DEBUG级别的日志信息,并且同时将日志输出到文件和控制台。
log4j.logger.jinhetech=DEBUG
log4j.logger.java.sql=ERROR
log4j.logger.java.sql.Connection=ERROR
log4j.logger.java.sql.Statement=ERROR
log4j.logger.java.sql.PreparedStatement=ERROR
log4j.logger.java.sql.ResultSet=ERROR
log4j.logger.org.apache.struts2=DEBUG
log4j.logger.org.apache.jsp=DEBUG
log5j.logger.org.springframework=ERROR
log4j.logger.com.ibatis=DEBUG
#还可以详细指定到某一个类的输出级别和输出目的地
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG,glitterFile,console

#无聊的分隔线--------------------------------------------------------------------------------------------------------------------------------------

#每天产生一个日志文件
log4j.appender.glitterFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.glitterFile.File=${rootPath}/WEB-INF/logs/glitter.log
log4j.appender.glitterFile.layout=org.apache.log4j.PatternLayout
log4j.appender.glitterFile.layout.ConversionPattern=[glitter][%d{yyyy-MM-dd HH\:mm\:ss\:SSS}][%t][%-5p][%C-%L]-%m%n


#配置控制台输出项
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[glitter][%d{yyyy-MM-dd HH\:mm\:ss\:SSS}][%t][%-5p][%C-%L]-%m%n

#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。

#再写一个输出到数据库的示例。